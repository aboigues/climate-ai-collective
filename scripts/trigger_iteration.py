#!/usr/bin/env python3
"""
Script pour d√©clencher une it√©ration IA via l'orchestrateur.

Ce script envoie une requ√™te √† l'orchestrateur pour g√©n√©rer
une nouvelle proposition climatique bas√©e sur le contexte fourni.
"""

import argparse
import json
import os
import sys
from pathlib import Path
from typing import Dict, Any
import time


def parse_args():
    """Parse les arguments de la ligne de commande."""
    parser = argparse.ArgumentParser(
        description="D√©clenche une it√©ration IA pour g√©n√©rer une proposition"
    )
    parser.add_argument(
        "--domain",
        required=True,
        help="Domaine √† traiter"
    )
    parser.add_argument(
        "--context",
        required=True,
        help="Fichier JSON de contexte en entr√©e"
    )
    parser.add_argument(
        "--output",
        required=True,
        help="Fichier JSON de sortie pour la proposition"
    )
    parser.add_argument(
        "--orchestrator-url",
        default=os.environ.get("ORCHESTRATOR_URL", ""),
        help="URL de l'orchestrateur (ou variable d'environnement ORCHESTRATOR_URL)"
    )
    return parser.parse_args()


def load_context(context_path: str) -> Dict[str, Any]:
    """Charge le fichier de contexte."""
    with open(context_path, 'r', encoding='utf-8') as f:
        return json.load(f)


def call_orchestrator(domain: str, context: Dict[str, Any], orchestrator_url: str) -> Dict[str, Any]:
    """
    Appelle l'orchestrateur pour g√©n√©rer une proposition.

    Args:
        domain: Nom du domaine
        context: Contexte charg√©
        orchestrator_url: URL de l'orchestrateur

    Returns:
        La proposition g√©n√©r√©e
    """
    # Si l'URL de l'orchestrateur n'est pas fournie, g√©n√©rer une proposition mock
    if not orchestrator_url:
        print("‚ö†Ô∏è  No orchestrator URL provided, generating mock proposal", file=sys.stderr)
        return generate_mock_proposal(domain, context)

    # TODO: Impl√©menter l'appel r√©el √† l'orchestrateur
    # Pour l'instant, on g√©n√®re une proposition mock
    print(f"ü§ñ Calling orchestrator at: {orchestrator_url}")
    print(f"   Domain: {domain}")

    try:
        import httpx

        response = httpx.post(
            f"{orchestrator_url}/api/v1/proposals/generate",
            json={
                "domain": domain,
                "context": context
            },
            timeout=300.0  # 5 minutes
        )

        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå Orchestrator returned error: {response.status_code}", file=sys.stderr)
            print(f"   Falling back to mock proposal", file=sys.stderr)
            return generate_mock_proposal(domain, context)

    except Exception as e:
        print(f"‚ùå Failed to call orchestrator: {e}", file=sys.stderr)
        print(f"   Falling back to mock proposal", file=sys.stderr)
        return generate_mock_proposal(domain, context)


def generate_mock_proposal(domain: str, context: Dict[str, Any]) -> Dict[str, Any]:
    """
    G√©n√®re une proposition mock pour les tests.

    Cette fonction g√©n√®re une proposition r√©aliste bas√©e sur le domaine
    et le contexte, utilisable pour tester le workflow sans orchestrateur r√©el.
    """
    from datetime import datetime
    import uuid

    # Propositions types par domaine
    domain_proposals = {
        "transport": {
            "title": "Extension du r√©seau de pistes cyclables s√©curis√©es",
            "description": "Cr√©ation de 50 km de pistes cyclables prot√©g√©es dans les zones urbaines pour favoriser la mobilit√© douce et r√©duire les √©missions de CO2.",
            "actions": [
                "Identifier les axes prioritaires en collaboration avec les collectivit√©s",
                "Concevoir des pistes s√©par√©es du trafic automobile",
                "Installer des stationnements v√©lo s√©curis√©s aux points d'int√©r√™t",
                "Mettre en place une signal√©tique claire et coh√©rente"
            ],
            "cost_estimate": 15000000,
            "timeframe_years": 3,
            "co2_reduction_potential": 8500
        },
        "energie": {
            "title": "D√©ploiement de panneaux solaires sur b√¢timents publics",
            "description": "Installation de 100 MW de capacit√© solaire photovolta√Øque sur les toitures de b√¢timents publics existants.",
            "actions": [
                "Audit √©nerg√©tique des b√¢timents publics",
                "S√©lection des sites les plus adapt√©s",
                "Installation des panneaux photovolta√Øques",
                "Connexion au r√©seau et monitoring"
            ],
            "cost_estimate": 120000000,
            "timeframe_years": 4,
            "co2_reduction_potential": 45000
        },
        "batiment": {
            "title": "Programme de r√©novation √©nerg√©tique des logements anciens",
            "description": "R√©novation thermique de 1000 logements construits avant 1990 pour atteindre le standard Minergie.",
            "actions": [
                "Identification des b√¢timents prioritaires",
                "Isolation renforc√©e (toiture, fa√ßades, sols)",
                "Remplacement des fen√™tres par du double vitrage performant",
                "Installation de syst√®mes de chauffage efficaces (pompes √† chaleur)"
            ],
            "cost_estimate": 80000000,
            "timeframe_years": 5,
            "co2_reduction_potential": 15000
        },
        "agriculture": {
            "title": "Transition vers l'agriculture r√©g√©n√©rative",
            "description": "Accompagnement de 500 exploitations agricoles vers des pratiques r√©g√©n√©ratives s√©questrant du carbone.",
            "actions": [
                "Formation des agriculteurs aux techniques r√©g√©n√©ratives",
                "Mise en place de cultures de couverture",
                "R√©duction du labour et pratique du semis direct",
                "Agroforesterie et haies bocag√®res"
            ],
            "cost_estimate": 25000000,
            "timeframe_years": 5,
            "co2_reduction_potential": 35000
        },
        "industrie": {
            "title": "D√©carbonation des processus industriels",
            "description": "√âlectrification et optimisation √©nerg√©tique de 50 sites industriels pour r√©duire les √©missions.",
            "actions": [
                "Audit √©nerg√©tique complet des sites",
                "Remplacement des chaudi√®res fossiles par des alternatives √©lectriques",
                "R√©cup√©ration de chaleur fatale",
                "Optimisation des processus de production"
            ],
            "cost_estimate": 200000000,
            "timeframe_years": 6,
            "co2_reduction_potential": 120000
        },
        "transversal": {
            "title": "Plateforme num√©rique d'accompagnement √† la d√©carbonation",
            "description": "Cr√©ation d'une plateforme digitale pour aider citoyens et entreprises √† mesurer et r√©duire leur empreinte carbone.",
            "actions": [
                "D√©veloppement de la plateforme web et mobile",
                "Int√©gration de calculateurs d'empreinte carbone",
                "Recommandations personnalis√©es bas√©es sur l'IA",
                "Communaut√© et gamification pour encourager l'action"
            ],
            "cost_estimate": 5000000,
            "timeframe_years": 2,
            "co2_reduction_potential": 50000
        }
    }

    # S√©lectionner la proposition appropri√©e
    proposal_template = domain_proposals.get(domain, domain_proposals["transversal"])

    # G√©n√©rer un ID unique
    proposal_id = str(uuid.uuid4())[:8]

    # Construire la proposition compl√®te
    proposal = {
        "id": f"{domain}-{proposal_id}",
        "domain": domain,
        "title": proposal_template["title"],
        "description": proposal_template["description"],
        "status": "generated",
        "generated_at": datetime.utcnow().isoformat() + "Z",
        "generated_by": "mock-generator",
        "version": "1.0",
        "content": {
            "summary": proposal_template["description"],
            "actions": proposal_template["actions"],
            "implementation": {
                "phases": [
                    {
                        "name": "Phase 1: Pr√©paration",
                        "duration_months": 6,
                        "tasks": ["√âtudes pr√©liminaires", "Consultations parties prenantes"]
                    },
                    {
                        "name": "Phase 2: D√©ploiement",
                        "duration_months": proposal_template["timeframe_years"] * 12 - 12,
                        "tasks": ["Mise en ≈ìuvre", "Suivi et ajustements"]
                    },
                    {
                        "name": "Phase 3: √âvaluation",
                        "duration_months": 6,
                        "tasks": ["Mesure des impacts", "Rapport final"]
                    }
                ],
                "total_duration_years": proposal_template["timeframe_years"]
            },
            "budget": {
                "total_chf": proposal_template["cost_estimate"],
                "breakdown": {
                    "infrastructure": proposal_template["cost_estimate"] * 0.6,
                    "personnel": proposal_template["cost_estimate"] * 0.25,
                    "communication": proposal_template["cost_estimate"] * 0.05,
                    "contingency": proposal_template["cost_estimate"] * 0.1
                }
            },
            "impact": {
                "co2_reduction_tonnes_10y": proposal_template["co2_reduction_potential"],
                "co2_reduction_tonnes_yearly": proposal_template["co2_reduction_potential"] / 10,
                "additional_benefits": [
                    "Am√©lioration de la qualit√© de l'air",
                    "Cr√©ation d'emplois locaux",
                    "Am√©lioration de la qualit√© de vie"
                ]
            },
            "risks": [
                {
                    "description": "D√©passement budg√©taire",
                    "probability": "medium",
                    "mitigation": "Budget de contingence de 10%"
                },
                {
                    "description": "Retards administratifs",
                    "probability": "low",
                    "mitigation": "Anticipation des proc√©dures"
                }
            ],
            "stakeholders": [
                "Collectivit√©s locales",
                "Citoyens",
                "Entreprises locales",
                "Organisations environnementales"
            ]
        },
        "metadata": {
            "context_version": context.get("metadata", {}).get("schema_version", "unknown"),
            "is_mock": True
        }
    }

    return proposal


def export_proposal(proposal: Dict[str, Any], output_path: str):
    """Exporte la proposition dans un fichier JSON."""
    output_file = Path(output_path)
    output_file.parent.mkdir(parents=True, exist_ok=True)

    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(proposal, f, indent=2, ensure_ascii=False)

    print(f"üíæ Proposal exported to: {output_path}")


def main():
    """Point d'entr√©e principal du script."""
    args = parse_args()

    try:
        print(f"üöÄ Starting AI iteration for domain: {args.domain}")

        # Charger le contexte
        print(f"üìñ Loading context from: {args.context}")
        context = load_context(args.context)

        # Appeler l'orchestrateur
        print(f"ü§ñ Generating proposal...")
        proposal = call_orchestrator(args.domain, context, args.orchestrator_url)

        # Exporter la proposition
        export_proposal(proposal, args.output)

        print("‚ú® Done!")
        print(f"üìã Proposal ID: {proposal['id']}")
        print(f"üìä CO2 reduction potential: {proposal['content']['impact']['co2_reduction_tonnes_10y']} tonnes (10 years)")

        return 0

    except Exception as e:
        print(f"‚ùå Error: {e}", file=sys.stderr)
        import traceback
        traceback.print_exc()
        return 1


if __name__ == "__main__":
    sys.exit(main())
