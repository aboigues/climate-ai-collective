---
# PersistentVolumeClaim pour les données de votes
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: citizen-votes-data
  namespace: climate-ai
  labels:
    app: citizen-api
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: infomaniak-block-storage
  resources:
    requests:
      storage: 10Gi

---
# Deployment de la citizen-api
apiVersion: apps/v1
kind: Deployment
metadata:
  name: citizen-api
  namespace: climate-ai
  labels:
    app: citizen-api
    component: api
spec:
  replicas: 2  # 2 replicas pour la haute disponibilité
  selector:
    matchLabels:
      app: citizen-api
  template:
    metadata:
      labels:
        app: citizen-api
        component: api
    spec:
      containers:
      - name: citizen-api
        image: climate-ai/citizen-api:latest  # TODO: Remplacer par l'image dans votre registry
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8002
          name: http
          protocol: TCP
        volumeMounts:
        - name: votes-data
          mountPath: /app/data
        - name: domains-data
          mountPath: /app/domains
          readOnly: true
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8002
          initialDelaySeconds: 15
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8002
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: votes-data
        persistentVolumeClaim:
          claimName: citizen-votes-data
      - name: domains-data
        persistentVolumeClaim:
          claimName: simulation-data  # Réutilise le PVC existant pour les données de simulation
      # Stratégie de déploiement
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxSurge: 1
          maxUnavailable: 0

---
# Service de la citizen-api
apiVersion: v1
kind: Service
metadata:
  name: citizen-api-service
  namespace: climate-ai
  labels:
    app: citizen-api
    component: api
spec:
  type: ClusterIP
  ports:
  - port: 8002
    targetPort: 8002
    protocol: TCP
    name: http
  selector:
    app: citizen-api

---
# Horizontal Pod Autoscaler pour la citizen-api
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: citizen-api-hpa
  namespace: climate-ai
  labels:
    app: citizen-api
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: citizen-api
  minReplicas: 2
  maxReplicas: 6
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
