name: Frontend Deployment Test

on:
  push:
    branches:
      - main
      - 'claude/**'
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-deploy.yml'
  pull_request:
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-deploy.yml'
  workflow_dispatch:
    inputs:
      push_image:
        description: 'Push image to registry'
        required: false
        type: boolean
        default: false

jobs:
  test-build:
    name: Test Frontend Build
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          load: true
          tags: climate-ai/frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test image structure
        run: |
          echo "üîç Testing image structure..."

          # V√©rifier que l'image existe
          docker images | grep climate-ai/frontend

          # V√©rifier que les fichiers HTML sont pr√©sents
          echo "üìÑ Checking HTML files..."
          docker run --rm climate-ai/frontend:test ls -la /usr/share/nginx/html/

          # V√©rifier que index.html existe
          docker run --rm climate-ai/frontend:test test -f /usr/share/nginx/html/index.html
          echo "‚úÖ index.html found"

          # V√©rifier que proposal.html existe
          docker run --rm climate-ai/frontend:test test -f /usr/share/nginx/html/proposal.html
          echo "‚úÖ proposal.html found"

          # V√©rifier que les fichiers JS existent
          docker run --rm climate-ai/frontend:test test -f /usr/share/nginx/html/app.js
          echo "‚úÖ app.js found"

          docker run --rm climate-ai/frontend:test test -f /usr/share/nginx/html/proposal.js
          echo "‚úÖ proposal.js found"

          # V√©rifier que le fichier CSS existe
          docker run --rm climate-ai/frontend:test test -f /usr/share/nginx/html/styles.css
          echo "‚úÖ styles.css found"

          # V√©rifier la configuration nginx
          docker run --rm climate-ai/frontend:test test -f /etc/nginx/conf.d/default.conf
          echo "‚úÖ nginx configuration found"

      - name: Start frontend container
        run: |
          echo "üöÄ Starting frontend container..."
          docker run -d --name frontend-test \
            -p 8080:80 \
            -e API_BASE_URL=http://test-api:8002 \
            climate-ai/frontend:test

          # Attendre que le container d√©marre
          sleep 5

          # V√©rifier que le container est bien running
          docker ps | grep frontend-test

      - name: Test health endpoint
        run: |
          echo "üè• Testing health endpoint..."

          # Attendre que nginx soit pr√™t
          for i in {1..30}; do
            if curl -f http://localhost:8080/ > /dev/null 2>&1; then
              echo "‚úÖ Frontend is responding"
              break
            fi
            echo "‚è≥ Waiting for frontend to be ready... ($i/30)"
            sleep 2
          done

          # V√©rifier que la page principale se charge
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/)
          if [ "$response" = "200" ]; then
            echo "‚úÖ Main page returns 200 OK"
          else
            echo "‚ùå Main page returns $response"
            exit 1
          fi

          # V√©rifier que la page de proposition se charge
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/proposal.html)
          if [ "$response" = "200" ]; then
            echo "‚úÖ Proposal page returns 200 OK"
          else
            echo "‚ùå Proposal page returns $response"
            exit 1
          fi

      - name: Test content
        run: |
          echo "üìù Testing page content..."

          # V√©rifier que index.html contient le titre
          content=$(curl -s http://localhost:8080/)
          if echo "$content" | grep -q "Climate AI Collective"; then
            echo "‚úÖ Main page contains expected title"
          else
            echo "‚ùå Main page does not contain expected title"
            exit 1
          fi

          # V√©rifier que app.js est accessible
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/app.js)
          if [ "$response" = "200" ]; then
            echo "‚úÖ app.js is accessible"
          else
            echo "‚ùå app.js returns $response"
            exit 1
          fi

          # V√©rifier que styles.css est accessible
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/styles.css)
          if [ "$response" = "200" ]; then
            echo "‚úÖ styles.css is accessible"
          else
            echo "‚ùå styles.css returns $response"
            exit 1
          fi

      - name: Test API URL injection
        run: |
          echo "üîß Testing API URL injection..."

          # R√©cup√©rer le contenu de app.js et v√©rifier que l'URL a √©t√© inject√©e
          docker exec frontend-test cat /usr/share/nginx/html/app.js | grep -q "test-api:8002"
          if [ $? -eq 0 ]; then
            echo "‚úÖ API URL correctly injected in app.js"
          else
            echo "‚ùå API URL not properly injected"
            exit 1
          fi

      - name: Check container logs
        if: always()
        run: |
          echo "üìã Container logs:"
          docker logs frontend-test

      - name: Stop and remove container
        if: always()
        run: |
          echo "üõë Stopping container..."
          docker stop frontend-test || true
          docker rm frontend-test || true

      - name: Login to GitHub Container Registry
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.push_image == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push image to registry
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.push_image == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/climate-ai-frontend:latest
            ghcr.io/${{ github.repository_owner }}/climate-ai-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test-kubernetes:
    name: Test Kubernetes Manifests
    runs-on: ubuntu-latest
    needs: test-build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install PyYAML
        run: pip install pyyaml

      - name: Validate Kubernetes manifests
        run: |
          echo "üîç Validating Kubernetes manifests..."

          # V√©rifier que les fichiers existent
          if [ ! -f "kubernetes/base/frontend/deployment.yaml" ]; then
            echo "‚ùå deployment.yaml not found"
            exit 1
          fi

          echo "‚úÖ Kubernetes manifests found"

          # Valider la syntaxe YAML avec Python
          python3 << 'EOF'
          import yaml
          import sys

          try:
              with open('kubernetes/base/frontend/deployment.yaml', 'r') as f:
                  docs = list(yaml.safe_load_all(f))

              print(f"‚úÖ YAML syntax is valid ({len(docs)} documents found)")

              # V√©rifier que ce sont des objets Kubernetes valides
              for i, doc in enumerate(docs):
                  if not isinstance(doc, dict):
                      print(f"‚ùå Document {i+1} is not a valid Kubernetes object")
                      sys.exit(1)

                  if 'apiVersion' not in doc or 'kind' not in doc:
                      print(f"‚ùå Document {i+1} is missing 'apiVersion' or 'kind'")
                      sys.exit(1)

                  print(f"  - {doc['kind']}: {doc.get('metadata', {}).get('name', 'unknown')}")

              print("‚úÖ All documents are valid Kubernetes objects")

          except yaml.YAMLError as e:
              print(f"‚ùå YAML syntax error: {e}")
              sys.exit(1)
          except Exception as e:
              print(f"‚ùå Validation error: {e}")
              sys.exit(1)
          EOF

          echo "‚úÖ Kubernetes manifests are valid"

      - name: Check manifest configuration
        run: |
          echo "üîç Checking manifest configuration..."

          python3 << 'EOF'
          import yaml
          import sys

          try:
              with open('kubernetes/base/frontend/deployment.yaml', 'r') as f:
                  docs = list(yaml.safe_load_all(f))

              # Trouver le Deployment
              deployment = None
              service = None
              for doc in docs:
                  if doc.get('kind') == 'Deployment':
                      deployment = doc
                  elif doc.get('kind') == 'Service':
                      service = doc

              if not deployment:
                  print("‚ùå No Deployment found in manifest")
                  sys.exit(1)

              # V√©rifier les replicas
              replicas = deployment.get('spec', {}).get('replicas', 0)
              if replicas >= 1:
                  print(f"‚úÖ Deployment has {replicas} replicas")
              else:
                  print(f"‚ùå Deployment should have at least 1 replica, found {replicas}")
                  sys.exit(1)

              # V√©rifier que le service expose le port 80
              if service:
                  ports = service.get('spec', {}).get('ports', [])
                  has_port_80 = any(p.get('port') == 80 for p in ports)
                  if has_port_80:
                      print("‚úÖ Service exposes port 80")
                  else:
                      print("‚ùå Service should expose port 80")
                      sys.exit(1)

              # V√©rifier les health checks
              containers = deployment.get('spec', {}).get('template', {}).get('spec', {}).get('containers', [])
              if not containers:
                  print("‚ùå No containers found in Deployment")
                  sys.exit(1)

              container = containers[0]
              if 'livenessProbe' in container:
                  print("‚úÖ Liveness probe configured")
              else:
                  print("‚ùå Liveness probe not configured")
                  sys.exit(1)

              if 'readinessProbe' in container:
                  print("‚úÖ Readiness probe configured")
              else:
                  print("‚ùå Readiness probe not configured")
                  sys.exit(1)

              print("‚úÖ All configuration checks passed")

          except Exception as e:
              print(f"‚ùå Configuration check error: {e}")
              sys.exit(1)
          EOF

  summary:
    name: Deployment Test Summary
    runs-on: ubuntu-latest
    needs: [test-build, test-kubernetes]
    if: always()

    steps:
      - name: Summary
        run: |
          echo "## üéâ Frontend Deployment Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.test-build.result }}" = "success" ]; then
            echo "‚úÖ **Docker Build Test:** PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Docker Build Test:** FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.test-kubernetes.result }}" = "success" ]; then
            echo "‚úÖ **Kubernetes Manifest Test:** PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Kubernetes Manifest Test:** FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Deploy to staging environment" >> $GITHUB_STEP_SUMMARY
          echo "- Run integration tests" >> $GITHUB_STEP_SUMMARY
          echo "- Deploy to production" >> $GITHUB_STEP_SUMMARY
