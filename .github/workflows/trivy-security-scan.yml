name: Trivy Security Scan

on:
  push:
    branches:
      - main
      - 'claude/**'
  pull_request:
    branches:
      - main
  schedule:
    # Scan quotidien à 2h du matin UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  scan-filesystem:
    name: Scan Filesystem & Dependencies
    runs-on: ubuntu-latest

    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner in fs mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'  # Ne pas échouer pour pouvoir uploader les résultats

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'

      - name: Run Trivy with exit code for CI
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'  # Échouer si vulnérabilités CRITICAL ou HIGH trouvées

  scan-docker-main:
    name: Scan Main Docker Image
    runs-on: ubuntu-latest

    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Free disk space
        run: |
          echo "Disk space before cleanup:"
          df -h

          # Remove unnecessary software to free up space
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo docker image prune -af

          echo "Disk space after cleanup:"
          df -h

      - name: Build Docker image
        run: |
          docker build -t climate-ai/main:test -f docker/Dockerfile .

      - name: Run Trivy vulnerability scanner on Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'climate-ai/main:test'
          format: 'sarif'
          output: 'trivy-docker-main-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-docker-main-results.sarif'

      - name: Run Trivy with exit code for CI
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'climate-ai/main:test'
          format: 'table'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

  scan-docker-frontend:
    name: Scan Frontend Docker Image
    runs-on: ubuntu-latest

    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t climate-ai/frontend:test -f frontend/Dockerfile frontend/

      - name: Run Trivy vulnerability scanner on Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'climate-ai/frontend:test'
          format: 'sarif'
          output: 'trivy-docker-frontend-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-docker-frontend-results.sarif'

      - name: Run Trivy with exit code for CI
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'climate-ai/frontend:test'
          format: 'table'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

  scan-docker-citizen-api:
    name: Scan Citizen API Docker Image
    runs-on: ubuntu-latest

    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t climate-ai/citizen-api:test -f services/citizen-api/Dockerfile services/citizen-api/

      - name: Run Trivy vulnerability scanner on Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'climate-ai/citizen-api:test'
          format: 'sarif'
          output: 'trivy-docker-citizen-api-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-docker-citizen-api-results.sarif'

      - name: Run Trivy with exit code for CI
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'climate-ai/citizen-api:test'
          format: 'table'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

  summary:
    name: Security Scan Summary
    runs-on: ubuntu-latest
    needs: [scan-filesystem, scan-docker-main, scan-docker-frontend, scan-docker-citizen-api]
    if: always()

    steps:
      - name: Generate summary
        run: |
          echo "## 🔒 Trivy Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Ce workflow scanne les vulnérabilités CRITICAL et HIGH dans:" >> $GITHUB_STEP_SUMMARY
          echo "- Le système de fichiers et dépendances Python" >> $GITHUB_STEP_SUMMARY
          echo "- L'image Docker principale (services backend)" >> $GITHUB_STEP_SUMMARY
          echo "- L'image Docker frontend" >> $GITHUB_STEP_SUMMARY
          echo "- L'image Docker citizen-api" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.scan-filesystem.result }}" = "success" ]; then
            echo "✅ **Filesystem Scan:** PASSED (no CRITICAL/HIGH vulnerabilities)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Filesystem Scan:** FAILED (CRITICAL/HIGH vulnerabilities found)" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.scan-docker-main.result }}" = "success" ]; then
            echo "✅ **Main Docker Image:** PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Main Docker Image:** FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.scan-docker-frontend.result }}" = "success" ]; then
            echo "✅ **Frontend Docker Image:** PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Frontend Docker Image:** FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.scan-docker-citizen-api.result }}" = "success" ]; then
            echo "✅ **Citizen API Docker Image:** PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Citizen API Docker Image:** FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Détails" >> $GITHUB_STEP_SUMMARY
          echo "- Les résultats SARIF sont uploadés dans l'onglet Security" >> $GITHUB_STEP_SUMMARY
          echo "- Seules les vulnérabilités CRITICAL et HIGH font échouer le build" >> $GITHUB_STEP_SUMMARY
          echo "- Le scan s'exécute à chaque push et quotidiennement à 2h UTC" >> $GITHUB_STEP_SUMMARY
