name: AI Iteration Workflow

on:
  schedule:
    # Exécute tous les lundis à 9h UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:  # Permet déclenchement manuel
    inputs:
      domain:
        description: 'Domain to process'
        required: true
        type: choice
        options:
          - transport
          - energie
          - batiment
          - agriculture
          - industrie
          - transversal

jobs:
  generate-proposal:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    env:
      ORCHESTRATOR_URL: ${{ secrets.ORCHESTRATOR_URL }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
      
      - name: Determine domain to process
        id: domain
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "domain=${{ github.event.inputs.domain }}" >> $GITHUB_OUTPUT
          else
            # Rotation automatique par semaine
            WEEK=$(date +%V)
            DOMAINS=(transport energie batiment agriculture industrie transversal)
            INDEX=$((WEEK % ${#DOMAINS[@]}))
            echo "domain=${DOMAINS[$INDEX]}" >> $GITHUB_OUTPUT
          fi
      
      - name: Load context from repository
        id: context
        run: |
          python scripts/load_context.py \
            --domain ${{ steps.domain.outputs.domain }} \
            --output context.json
      
      - name: Call orchestrator to generate proposal
        id: generate
        run: |
          python scripts/trigger_iteration.py \
            --domain ${{ steps.domain.outputs.domain }} \
            --context context.json \
            --output proposal.json
      
      - name: Validate proposal
        id: validate
        run: |
          python services/validation/validator_cli.py \
            --proposal proposal.json \
            --output validation.json
      
      - name: Check validation result
        run: |
          VALID=$(jq -r '.valid' validation.json)
          if [ "$VALID" != "true" ]; then
            echo "❌ Validation failed"
            jq '.issues' validation.json
            exit 1
          fi
          echo "✅ Validation passed"
      
      - name: Run quick simulation
        id: simulate
        run: |
          python scripts/run_simulation.py \
            --proposal proposal.json \
            --type quick \
            --output simulation.json
      
      - name: Create proposal branch
        id: create-branch
        run: |
          DOMAIN=${{ steps.domain.outputs.domain }}
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          BRANCH="ai-proposal/${DOMAIN}/${TIMESTAMP}"
          
          git config user.name "Climate AI Bot"
          git config user.email "bot@climate-ai-collective.org"
          
          git checkout -b "$BRANCH"
          
          # Copier les fichiers générés
          PROPOSAL_ID=$(jq -r '.id' proposal.json)
          mkdir -p "domains/${DOMAIN}/proposals/${PROPOSAL_ID}"
          
          cp proposal.json "domains/${DOMAIN}/proposals/${PROPOSAL_ID}/"
          cp validation.json "domains/${DOMAIN}/proposals/${PROPOSAL_ID}/"
          cp simulation.json "domains/${DOMAIN}/proposals/${PROPOSAL_ID}/simulation_quick.json"
          
          git add domains/
          git commit -m "🤖 AI Proposal: ${DOMAIN} - ${PROPOSAL_ID}" \
                     -m "Generated by Climate AI Collective" \
                     -m "Domain: ${DOMAIN}" \
                     -m "Validation Score: $(jq -r '.score' validation.json)/10" \
                     -m "CO2 Impact (10y): $(jq -r '.co2_impact.scenarios.realistic.total_10y' simulation.json) tonnes" \
                     -m "[skip ci]"
          
          git push origin "$BRANCH"
          
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
      
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.create-branch.outputs.branch }}
          title: "🤖 [${{ steps.domain.outputs.domain }}] New AI Proposal"
          body: |
            ## 🌍 Nouvelle Proposition Climatique
            
            **Domaine:** ${{ steps.domain.outputs.domain }}
            **Générée par:** Climate AI Orchestrator
            **Date:** ${{ github.event.repository.updated_at }}
            
            ### 📊 Résultats de Validation
            
            - **Score:** ${{ steps.validate.outputs.score }}/10
            - **Statut:** ✅ Validée
            
            ### 🎯 Impact Estimé
            
            - **Réduction CO2 (10 ans):** ${{ steps.simulate.outputs.co2_total }} tonnes
            - **Coût d'implémentation:** ${{ steps.simulate.outputs.cost }} CHF
            - **ROI (20 ans):** ${{ steps.simulate.outputs.roi }}%
            - **Payback:** ${{ steps.simulate.outputs.payback }} ans
            
            ### 📋 Prochaines Étapes
            
            1. ✅ Validation automatique complétée
            2. ⏳ En attente de review par IA experte
            3. ⏳ Simulation approfondie à lancer
            4. ⏳ Vote citoyen à ouvrir
            
            ### 🔗 Fichiers Générés
            
            - [Proposition complète](./proposal.json)
            - [Rapport de validation](./validation.json)
            - [Résultats simulation](./simulation_quick.json)
            
            ---
            
            🤖 *Cette PR a été créée automatiquement par le Climate AI Collective*
          labels: |
            ai-generated
            ${{ steps.domain.outputs.domain }}
            needs-review
          reviewers: |
            climate-ai-reviewer-bot
      
      - name: Notify on failure
        if: failure()
        run: |
          echo "⚠️ AI Iteration failed for domain: ${{ steps.domain.outputs.domain }}"
          # Ici on pourrait envoyer une notification (Slack, email, etc.)
