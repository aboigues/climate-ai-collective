name: AI Iteration Workflow

on:
  schedule:
    # Ex√©cute tous les lundis √† 9h UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:  # Permet d√©clenchement manuel
    inputs:
      domain:
        description: 'Domain to process'
        required: true
        type: choice
        options:
          - transport
          - energie
          - batiment
          - agriculture
          - industrie
          - transversal

jobs:
  generate-proposal:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    env:
      ORCHESTRATOR_URL: ${{ secrets.ORCHESTRATOR_URL }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
      
      - name: Determine domain to process
        id: domain
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "domain=${{ github.event.inputs.domain }}" >> $GITHUB_OUTPUT
          else
            # Rotation automatique par semaine
            WEEK=$(date +%V)
            DOMAINS=(transport energie batiment agriculture industrie transversal)
            INDEX=$((WEEK % ${#DOMAINS[@]}))
            echo "domain=${DOMAINS[$INDEX]}" >> $GITHUB_OUTPUT
          fi
      
      - name: Load context from repository
        id: context
        run: |
          python scripts/load_context.py \
            --domain ${{ steps.domain.outputs.domain }} \
            --output context.json
      
      - name: Call orchestrator to generate proposal
        id: generate
        run: |
          python scripts/trigger_iteration.py \
            --domain ${{ steps.domain.outputs.domain }} \
            --context context.json \
            --output proposal.json
      
      - name: Validate proposal
        id: validate
        run: |
          python services/validation/validator_cli.py \
            --proposal proposal.json \
            --output validation.json
      
      - name: Check validation result
        run: |
          VALID=$(jq -r '.valid' validation.json)
          if [ "$VALID" != "true" ]; then
            echo "‚ùå Validation failed"
            jq '.issues' validation.json
            exit 1
          fi
          echo "‚úÖ Validation passed"
      
      - name: Run quick simulation
        id: simulate
        run: |
          python scripts/run_simulation.py \
            --proposal proposal.json \
            --type quick \
            --output simulation.json
      
      - name: Create proposal branch and PR
        id: create-branch
        run: |
          DOMAIN=${{ steps.domain.outputs.domain }}
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          BRANCH="ai-proposal/${DOMAIN}/${TIMESTAMP}"

          git config user.name "Climate AI Bot"
          git config user.email "bot@climate-ai-collective.org"

          git checkout -b "$BRANCH"

          # Copier les fichiers g√©n√©r√©s
          PROPOSAL_ID=$(jq -r '.id' proposal.json)
          mkdir -p "domains/${DOMAIN}/proposals/${PROPOSAL_ID}"

          cp proposal.json "domains/${DOMAIN}/proposals/${PROPOSAL_ID}/"
          cp validation.json "domains/${DOMAIN}/proposals/${PROPOSAL_ID}/"
          cp simulation.json "domains/${DOMAIN}/proposals/${PROPOSAL_ID}/simulation_quick.json"

          git add domains/
          git commit -m "ü§ñ AI Proposal: ${DOMAIN} - ${PROPOSAL_ID}" \
                     -m "Generated by Climate AI Collective" \
                     -m "Domain: ${DOMAIN}" \
                     -m "Validation Score: $(jq -r '.score' validation.json)/10" \
                     -m "CO2 Impact (10y): $(jq -r '.co2_impact.scenarios.realistic.total_10y' simulation.json) tonnes" \
                     -m "[skip ci]"

          git push origin "$BRANCH"

          # Cr√©er la PR avec gh
          VALIDATION_SCORE=$(jq -r '.score' validation.json)
          CO2_IMPACT=$(jq -r '.co2_impact.scenarios.realistic.total_10y' simulation.json)
          COST=$(jq -r '.economic_impact.investment_chf' simulation.json)
          ROI=$(jq -r '.economic_impact.roi_20y_pct' simulation.json)
          PAYBACK=$(jq -r '.economic_impact.payback_years' simulation.json)
          CURRENT_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          PR_BODY=$(printf "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s" \
            "## üåç Nouvelle Proposition Climatique" \
            "" \
            "**Domaine:** ${DOMAIN}" \
            "**ID Proposition:** ${PROPOSAL_ID}" \
            "**G√©n√©r√©e par:** Climate AI Orchestrator" \
            "**Date:** ${CURRENT_DATE}" \
            "" \
            "### üìä R√©sultats de Validation" \
            "" \
            "- **Score:** ${VALIDATION_SCORE}/10" \
            "- **Statut:** ‚úÖ Valid√©e" \
            "" \
            "### üéØ Impact Estim√©" \
            "" \
            "- **R√©duction CO2 (10 ans):** ${CO2_IMPACT} tonnes" \
            "- **Co√ªt d'impl√©mentation:** ${COST} CHF" \
            "- **ROI (20 ans):** ${ROI}%" \
            "- **Payback:** ${PAYBACK} ans" \
            "" \
            "### üìã Prochaines √âtapes" \
            "" \
            "1. ‚úÖ Validation automatique compl√©t√©e" \
            "2. ‚è≥ En attente de review par IA experte" \
            "3. ‚è≥ Simulation approfondie √† lancer" \
            "4. ‚è≥ Vote citoyen √† ouvrir" \
            "" \
            "### üîó Fichiers G√©n√©r√©s" \
            "" \
            "- [Proposition compl√®te](domains/${DOMAIN}/proposals/${PROPOSAL_ID}/proposal.json)" \
            "- [Rapport de validation](domains/${DOMAIN}/proposals/${PROPOSAL_ID}/validation.json)" \
            "- [R√©sultats simulation](domains/${DOMAIN}/proposals/${PROPOSAL_ID}/simulation_quick.json)" \
            "" \
            "---" \
            "" \
            "ü§ñ *Cette PR a √©t√© cr√©√©e automatiquement par le Climate AI Collective*")

          gh pr create \
            --title "ü§ñ [${DOMAIN}] New AI Proposal - ${PROPOSAL_ID}" \
            --body "$PR_BODY" \
            --base main \
            --head "$BRANCH"

          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "proposal_id=$PROPOSAL_ID" >> $GITHUB_OUTPUT
      
      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ö†Ô∏è AI Iteration failed for domain: ${{ steps.domain.outputs.domain }}"
          # Ici on pourrait envoyer une notification (Slack, email, etc.)
